//
// パズル固有スクリプト部 たすくえあ版 tasquare.js v3.1.9p1
//

function setting(){
	// グローバル変数の初期設定
	if(!k.qcols){ k.qcols = 10;}	// 盤面の横幅
	if(!k.qrows){ k.qrows = 10;}	// 盤面の縦幅
	k.irowake = 0;			// 0:色分け設定無し 1:色分けしない 2:色分けする

	k.iscross      = 0;		// 1:Crossが操作可能なパズル
	k.isborder     = 1;		// 1:Border/Lineが操作可能なパズル
	k.isextendcell = 0;		// 1:上・左側にセルを用意するパズル 2:四方にセルを用意するパズル

	k.isoutsidecross  = 0;	// 1:外枠上にCrossの配置があるパズル
	k.isoutsideborder = 0;	// 1:盤面の外枠上にborderのIDを用意する
	k.isborderCross   = 0;	// 1:線が交差するパズル
	k.isCenterLine    = 0;	// 1:マスの真ん中を通る線を回答として入力するパズル
	k.isborderAsLine  = 0;	// 1:境界線をlineとして扱う

	k.dispzero      = 0;	// 1:0を表示するかどうか
	k.isDispHatena  = 0;	// 1:qnumが-2のときに？を表示する
	k.isAnsNumber   = 0;	// 1:回答に数字を入力するパズル
	k.isArrowNumber = 0;	// 1:矢印つき数字を入力するパズル
	k.isOneNumber   = 0;	// 1:部屋の問題の数字が1つだけ入るパズル
	k.isDispNumUL   = 0;	// 1:数字をマス目の左上に表示するパズル(0はマスの中央)
	k.NumberWithMB  = 0;	// 1:回答の数字と○×が入るパズル

	k.BlackCell     = 1;	// 1:黒マスを入力するパズル
	k.NumberIsWhite = 1;	// 1:数字のあるマスが黒マスにならないパズル
	k.RBBlackCell   = 0;	// 1:連黒分断禁のパズル

	k.ispzprv3ONLY  = 1;	// 1:ぱずぷれv3だけ
	k.isKanpenExist = 0;	// 1:pencilbox/カンペンにあるパズル

	k.fstruct = ["cellqnumans"];

	//k.def_csize = 36;
	//k.def_psize = 24;
}

//-------------------------------------------------------------
// Puzzle個別クラスの定義
Puzzle = function(){
	this.prefix();
};
Puzzle.prototype = {
	prefix : function(){
		this.input_init();
		this.graphic_init();

		base.setTitle("たすくえあ","Tasquare");
		base.setExpression("　左クリックで黒マスが、右クリックで白マス確定マスが入力できます。",
						   " Left Click to input black cells, Right Click to input determined white cells.");
		base.setFloatbgcolor("rgb(64, 64, 64)");
	},
	menufix : function(){
		menu.addUseToFlags();
	},
	postfix : function(){ },

	//---------------------------------------------------------
	//入力系関数オーバーライド
	input_init : function(){
		// マウス入力系
		mv.mousedown = function(x,y){
			if(k.mode==1){
				if(!kp.enabled()){ this.inputqnum(x,y,99);}
				else{ kp.display(x,y);}
			}
			else if(k.mode==3) this.inputcell(x,y);
		};
		mv.mouseup = function(x,y){ };
		mv.mousemove = function(x,y){
			if(k.mode==3) this.inputcell(x,y);
		};

		// キーボード入力系
		kc.keyinput = function(ca){
			if(k.mode==3){ return;}
			if(this.moveTCell(ca)){ return;}
			this.key_inputqnum(ca,99);
		};

		if(k.callmode == "pmake"){
			kp.generate(3, true, false, '');
			kp.kpinput = function(ca){
				kc.key_inputqnum(ca,99);
			};
		}
	},

	//---------------------------------------------------------
	//画像表示系関数オーバーライド
	graphic_init : function(){
		pc.BDlinecolor = "rgb(127, 127, 127)";
		pc.fontsizeratio = 0.85;

		pc.paint = function(x1,y1,x2,y2){
			this.flushCanvas(x1,y1,x2,y2);
		//	this.flushCanvasAll();

			this.drawWhiteCells(x1,y1,x2,y2);
			this.drawBDline(x1,y1,x2,y2);
			this.drawBlackCells(x1,y1,x2,y2);

			this.drawCellSquare(x1,y1,x2,y2);

			this.drawNumbers(x1,y1,x2,y2);

			this.drawChassis(x1,y1,x2,y2);

			if(k.mode==1){ this.drawTCell(x1,y1,x2+1,y2+1);}else{ this.hideTCell();}
		};

		pc.drawCellSquare = function(x1,y1,x2,y2){
			var mgnw = int(k.cwidth*0.1);
			var mgnh = int(k.cheight*0.1);

			var clist = this.cellinside(x1,y1,x2,y2,f_true);
			for(var i=0;i<clist.length;i++){
				var c = clist[i];
				if(bd.getQnumCell(c)!=-1){
					g.fillStyle = "black";
					if(this.vnop("c"+c+"_sq1_",1)){ g.fillRect(bd.cell[c].px()+mgnw+1, bd.cell[c].py()+mgnh+1, k.cwidth-mgnw*2-1, k.cheight-mgnh*2-1);}
					g.fillStyle = "white";
					if(this.vnop("c"+c+"_sq2_",1)){ g.fillRect(bd.cell[c].px()+mgnw+2, bd.cell[c].py()+mgnh+2, k.cwidth-mgnw*2-3, k.cheight-mgnh*2-3);}
				}
				else{ this.vhide("c"+c+"_sq1_"); this.vhide("c"+c+"_sq2_");}
			}
			this.vinc();
		};
	},

	//---------------------------------------------------------
	// URLエンコード/デコード処理
	pzlinput : function(type, bstr){
		if(type==0 || type==1){ bstr = enc.decodeNumber16(bstr);}
	},
	pzloutput : function(type){
		if(type==0)     { document.urloutput.ta.value = enc.getURLbase()+"?"+k.puzzleid+this.pzldata();}
		else if(type==1){ document.urloutput.ta.value = enc.getDocbase()+k.puzzleid+"/sa/m.html?c"+this.pzldata();}
		else if(type==3){ document.urloutput.ta.value = enc.getURLbase()+"?m+"+k.puzzleid+this.pzldata();}
	},
	pzldata : function(){
		return "/"+k.qcols+"/"+k.qrows+"/"+enc.encodeNumber16();
	},

	//---------------------------------------------------------
	// 正解判定処理実行部
	check : function(){

		var barea = ans.searchBarea();
		if( !ans.checkAllArea(barea, function(id){ return (bd.getQansCell(id)==1);}, function(w,h,a){ return (w*h==a && w==h);} ) ){
			ans.setAlert('正方形でない黒マスのカタマリがあります。','A mass of black cells is not regular rectangle.'); return false;
		}

		if( !ans.linkBWarea( ans.searchWarea() ) ){
			ans.setAlert('白マスが分断されています。','White cells are devided.'); return false;
		}

		if( !this.isNumberSquare(barea,0) ){
			ans.setAlert('数字とそれに接する黒マスの大きさの合計が一致しません。','Sum of the adjacent masses of black cells is not equal to the number.'); return false;
		}

		if( !this.isNumberSquare(barea,1) ){
			ans.setAlert('数字のない□に黒マスが接していません。','No black cells are adjacent to square mark without numbers.'); return false;
		}

		return true;
	},

	isNumberSquare : function(area, flag){
		for(var c=0;c<bd.cell.length;c++){
			if((flag==0?(bd.getQnumCell(c)<0):(bd.getQnumCell(c)!=-2))){ continue;}
			var cnt = 0;
			if(bd.getQansCell(bd.cell[c].up())==1){ cnt += ans.getCntOfRoom(area, area.check[bd.cell[c].up()]);}
			if(bd.getQansCell(bd.cell[c].dn())==1){ cnt += ans.getCntOfRoom(area, area.check[bd.cell[c].dn()]);}
			if(bd.getQansCell(bd.cell[c].lt())==1){ cnt += ans.getCntOfRoom(area, area.check[bd.cell[c].lt()]);}
			if(bd.getQansCell(bd.cell[c].rt())==1){ cnt += ans.getCntOfRoom(area, area.check[bd.cell[c].rt()]);}
			if(bd.getQnumCell(c)>=0?(bd.getQnumCell(c)!=cnt):(cnt==0)){
				if(bd.getQansCell(bd.cell[c].up())==1){ bd.setErrorCell(area.room[area.check[bd.cell[c].up()]],1); }
				if(bd.getQansCell(bd.cell[c].dn())==1){ bd.setErrorCell(area.room[area.check[bd.cell[c].dn()]],1); }
				if(bd.getQansCell(bd.cell[c].lt())==1){ bd.setErrorCell(area.room[area.check[bd.cell[c].lt()]],1); }
				if(bd.getQansCell(bd.cell[c].rt())==1){ bd.setErrorCell(area.room[area.check[bd.cell[c].rt()]],1); }
				bd.setErrorCell([c],1);
				return false;
			}
		}
		return true;
	}
};
